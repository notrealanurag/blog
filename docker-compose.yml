services:
  postgres:
    image: postgres:16
    container_name: blog-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${DB_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - blog-network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: blog-backend
    environment:
      - NODE_ENV=${NODE_ENV}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_USERNAME=${POSTGRES_USER}
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      - DB_NAME=${POSTGRES_DB}
      - JWT_SECRET=${JWT_SECRET}
      - FRONTEND_URL=${FRONTEND_URL}
      - PORT=${PORT}
      - SEED_DATABASE=${SEED_DATABASE}
    ports:
      - "${PORT}:${PORT}"
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - blog-network
    # Uncomment for development to enable hot-reload
    # volumes:
    #   - ./backend:/app
    #   - /app/node_modules

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: blog-frontend
    environment:
      - VITE_API_URL=${VITE_API_URL}
      - VITE_WS_URL=${VITE_WS_URL}
    ports:
      - "5173:5173"
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - blog-network
    # Uncomment for development to enable hot-reload
    # volumes:
    #   - ./frontend:/app
    #   - /app/node_modules

networks:
  blog-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
    # For development, you might want to add a named volume for node_modules
    # backend_node_modules:
    # frontend_node_modules:
